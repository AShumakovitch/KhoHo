/*
 *    KhoHo_diagr --- program for computing and studying Khovanov homology:
 *                    common routines for dealing with link diagrams
 *
 * Copyright (C) 2002--2018 Alexander Shumakovitch <Shurik@gwu.edu>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program  is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see COPYING.gz. If not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *
 *    Please refer to README for more details.
 */


/*
 * Return the number of crossings in a link diagram D.
 */
Xing_num(D) = matsize(D)[1];

/*
 * Return the number of edges in a link diagram D.
 */
edge_num(D) = 2 * matsize(D)[1];

/*
 * Given the list of edges adjacent to a crossing, check whether it's positive.
 */
is_Xing_pos(adj_edges) =
{
	if (adj_edges[3] == adj_edges[2], return (0));
	if (adj_edges[3] == adj_edges[4], return (1));
	adj_edges[2] - adj_edges[4] == 1 || adj_edges[4] - adj_edges[2] > 1;
}

/*
 * Return pmult times the number of positive crossings plus
 * nmult times the number of negative crossings in a link diagram D.
 */
pos_neg_Xings(D, pmult, nmult) =
{
	local (cnt);

	cnt = 0;
	for (i = 1, Xing_num(D),
		if (is_Xing_pos(D[i, ]), cnt += pmult; , cnt += nmult; );
	);

	cnt;
}

/*
 * Return the number of positive crossings in a link diagram D.
 */
posXing_num(D) = pos_neg_Xings(D, 1, 0);

/*
 * Return the number of negative crossings in a link diagram D.
 */
negXing_num(D) = pos_neg_Xings(D, 0, 1);

/*
 * Return the writhe number of a link diagram D.
 */
get_writhe(D) = pos_neg_Xings(D, 1, -1);

/*
 * For debugging only: check that the diagram represents a valid 4-valent graph.
 */
check_diagr(D) =
{
	local (vnum, enum, einfo);

	vnum = Xing_num(D);
	enum = edge_num(D);
	einfo = vectorsmall(enum);

	for (i = 1, vnum,
		for (j = 1, 4,
			if (D[i, j] > enum,
				error("check_diagr: edge number is too big!");
			);
			einfo[D[i, j]]++;
		);
	);

	for (i = 1, enum,
		if (einfo[i] != 2,
			error("check_diagr: wrong graph");
		);
	);

	return ("everything seems to be fine");
}

/*
 * Return the linking matrix of a given (link) diagram.
 */
get_lk_matrix_diagr(D) =
{
	local (components, lk_matrix, comp1, comp2, Xsign);

	components = list_components(D);
	lk_matrix = matrix(components.cycnum, components.cycnum);

	for (i = 1, Xing_num(D),
		comp1 = components.incycle[D[i, 1]];
		comp2 = components.incycle[D[i, 2]];
		Xsign = if (is_Xing_pos(D[i, ]), 1, -1);

		lk_matrix[comp1, comp2] += Xsign / 2;
		lk_matrix[comp2, comp1] += Xsign / 2;
	);

	lk_matrix;
}

/*
 * The same as get_lk_matrix_diagr, but for an initialized link diagram.
 */
get_lk_matrix(D_ID) = get_lk_matrix_diagr(DStore[D_ID].diagr);


/* ************************************************************************ */

/*
 * Auxiliary function: change a crossing by reordering adjacent edges.
 */
change_Xing_edges(adj_edges) =
{
	local (new_adj_edges);

        if (is_Xing_pos(adj_edges),
		new_adj_edges = vector(4, i, adj_edges[(i - 2) % 4 + 1]); ,
		new_adj_edges = vector(4, i, adj_edges[i % 4 + 1]);
	);

	new_adj_edges;
}


/*
 * Return the mirror image of a link diagram D.
 */
mirror_diagr(D) =
{
	local (newD);

	newD = D;
	for (i = 1, Xing_num(D),
		if (type(D) == "t_VEC",
			newD[1][i, ] = change_Xing_edges(D[1][i, ]); ,
			newD[i, ] = change_Xing_edges(D[i, ]);
		);
	);

	newD;
}

/*
 * The same as mirror_diagr, but for an initialized link diagram.
 * Diagram name is prepended with '-'.
 */
mirror(D_ID) =
{
	init_diagr(mirror_diagr(DStore[D_ID].diagr),
				concat("-", DStore[D_ID].name));
}

/*
 * Return the disjoint union of two link diagrams.
 */
disunion_diagr(D1, D2) =
{
	local (vnum2, enum1);

	enum1 = edge_num(D1);
	vnum2 = Xing_num(D2);

	/* increase numbers of the edges from D2 */
	for (i = 1, vnum2,
		for (j = 1, 4,
			D2[i, j] += enum1;
		);
	);

	concat(D1~, D2~)~;
}

/*
 * The same as disunion_diagr, but for initialized link diagrams.
 * Diagram names are glued together with '+' in the middle.
 */
disunion(D_ID1, D_ID2) =
{
	init_diagr(disunion_diagr(DStore[D_ID1].diagr, DStore[D_ID2].diagr),
			concat([DStore[D_ID1].name, "+", DStore[D_ID2].name]));
}

/*
 * Return the connected sum of two link diagrams.
 */
connsum_diagr(D1, D2) =
{
	local (vnum1, vnum2, enum1, where, D, vnum);

	vnum1 = Xing_num(D1);
	vnum2 = Xing_num(D2);
	enum1 = edge_num(D1);
	where = vector(2);

	/* find the vertices the first edges of the diagrams are coming from */
	for (d = 1, 2,
		D = eval(concat("D", d));
		vnum = eval(concat("vnum", d));
		for (i = 1, vnum,
			for (j = 1, 4,
				if (D[i, j] == 1 && D[i, (j + 1) % 4 + 1] != 2,
					where[d] = [i, j];
					break(2);
				);
			);
		);
	);

	/* increase numbers of the edges from D2 */
	for (i = 1, vnum2,
		for (j = 1, 4,
			D2[i, j] += enum1;
		);
	);

	/* and now connect the diagrams */
	D1[where[1][1], where[1][2]] = enum1 + 1;
	D2[where[2][1], where[2][2]] = 1;

	concat(D1~, D2~)~;
}

/*
 * The same as connsum_diagr, but for initialized link diagrams.
 * Diagram names are glued together with '#' in the middle.
 */
connsum(D_ID1, D_ID2) =
{
	init_diagr(connsum_diagr(DStore[D_ID1].diagr, DStore[D_ID2].diagr),
			concat([DStore[D_ID1].name, "#", DStore[D_ID2].name]));
}

/*
 * Cyclically reorder components in a link diagram. Components are ordered by
 * their smallest edge numbers. 1st component always contain the edge number 1.
 */
comp_reorder_diagr(D, new1st) =
{
	local (components, edge_shift, vnum, enum, newD);

	vnum = Xing_num(D);
	enum = edge_num(D);

	newD = matrix(vnum, 4);

	components = list_components(D);
	if (new1st > components.cycnum,
		error("comp_reorder_diagr: component number is too big");
	);

	/* first edge belonging to the component is always the smallest one */
	edge_shift = components.cycles[new1st][1] - 1;

	for (i = 1, vnum,
		for (j = 1, 4,
			newD[i, j] = (D[i, j] - edge_shift - 1) % enum + 1;
		);
	);

	newD;
}

/*
 * The same as comp_reorder_diagr, but for an initialized link diagram.
 * Number of the new first component is added to the name.
 */
comp_reorder(D_ID, new1st) =
{
	init_diagr(comp_reorder_diagr(DStore[D_ID].diagr, new1st),
					concat(DStore[D_ID].name, -new1st));
}

/* ************************************************************************ */

/*
 * Convert a (planar) 4-valent graph with information about over- and
 * under-crossings into a planar diagram of a link. Half-edges at each
 * vertex are enumerated in the counter-clockwise direction starting with
 * the incoming under-crossing. Signs are needed to decide direction.
 *
 * Planar graphs are encoded as follows:
 *   [ vertices ] --> [ sign, [ connection info for each half-edge ] ]
 *                                              |
 *                                             \|/
 *				   [ vertex, half-edge number ]
 */
graph2diagr(pgraph) =
{
	local (vnum, diagr, cur_enum, cur_vert, cur_ehead, cur_etail);
	local (next_vert_data, prev_vert_data);

	vnum = length(pgraph);
	diagr = matrix(vnum, 4);

	/* go over all 2*vnum incoming half-edges (that is, edge heads)
	 * that are enumerated through all the vertices with the
	 * under-crossing preceding the over-crossing.
	 * cur_enum will the the next edge number to be assigned */
	cur_enum = 1;
	for (i = 1, 2 * vnum,
		cur_vert = (i - 1) \ 2 + 1;
		/* incoming under-crossing has always number 1 and incoming
		 * over-crossing has number 2 or 4, depending on orientation */
		cur_ehead = if (i % 2, 1, 3 + pgraph[cur_vert][1]);

		/* if we didn't meet this incoming half-edge yet, start a new
		 * link component and follow the diagram until we come back */
		if (diagr[cur_vert, cur_ehead] == 0,
			until (2 * cur_vert - cur_ehead % 2 == i,
				diagr[cur_vert, cur_ehead] = cur_enum;

				/* the opposite outgoing half-edge */
				cur_etail = (cur_ehead + 1) % 4 + 1;

				cur_enum ++;
				diagr[cur_vert, cur_etail] = cur_enum;

				/* find the other end of the outgoing
				 * half-edge and move to the next vertex */
				next_vert_data = pgraph[cur_vert][2][cur_etail];
				cur_vert = next_vert_data[1];
				cur_ehead = next_vert_data[2];
			);

			/* the last outgoing half-edge encountered should
			 * belong to the same edge as the first (and also
			 * current) incoming one in this link component */
			prev_vert_data = pgraph[cur_vert][2][cur_ehead];
			diagr[prev_vert_data[1], prev_vert_data[2]] =
						diagr[cur_vert, cur_ehead];
		);
	);

	/* some debugging: check that the diagram obtained is sound */
	check_diagr(diagr);

	/* more debugging: check that the signs of crossings are correct */
	for (i = 1, vnum,
		if (is_Xing_pos(diagr[i, ]) != (pgraph[i][1] + 1) / 2,
			error("graph2diagr: wrong crossing signs");
		);
	);

	diagr;
}

/*
 * Convert a planar diagram of a link into the corresponding 4-valent graph.
 * Mainly for testing. Should be inverse of graph2diagr.
 */
diagr2graph(D) =
{
	local (vnum, enum, edge_info, pgraph);

	vnum = Xing_num(D);
	enum = edge_num(D);

	/* for each edge, we keep the vertex and half-edge numbers that it
	 * connects. It's easier to keep the sums, since we are always
	 * interested in what is on the other end */
	edge_info = vector(2 * vnum, i, [0, 0]);

	for (i = 1, vnum,
		for (j = 1, 4,
			/* i and j are the vertex and half-edge numbers */
			edge_info[D[i, j]] += [i, j];
		);
	);

	/* subtracting information about the current half-edge, gives the
	 * one about the half-edge on other end of the edge */
	pgraph = vector(vnum, i, [2 * is_Xing_pos(D[i, ]) - 1,
				vector(4, j, edge_info[D[i, j]] - [i, j])]);
}

/* ************************************************************************ */

/*
 * Translate a braid word into a link diagram of its closure.
 * The braid is assumed to be oriented from top to bottom.
 * Trivial strands are ignored!!
 */
braid2diagr(bindex, bword) =
{
	local (braid_length, pgraph, last_gens, cur_Xing, cur_gen);
	local (LU_edge, LD_edge, RD_edge, RU_edge, rstrand, lstrand);

	braid_length = length(bword);

	/* we create the 4-valent graph corresponding to this braid word
	 * and let graph2diagr do the rest */
	pgraph = vector(braid_length, i, [sign(bword[i]), vector(4)]);

	/* for each braid strand we keep information about the the last
	 * crossing that involved it. There is nothing at the beginning */
	last_gens = vector(bindex, i, [0, 0]);

	/* we have to go through the braid word TWICE, to make sure that
	 * every edge between crossings is accounted for */
	for (i = 1, 2 * braid_length,
		cur_Xing = (i - 1) % braid_length + 1;
		cur_gen = abs(bword[cur_Xing]);

		if (cur_gen < 1 || cur_gen >= bindex,
			error("braid2diagr: wrong braid word");
		);

		/* numbers of 4 half-edges at this crossing */
		LU_edge = if (bword[cur_Xing] > 0, 1, 2);
		LD_edge = LU_edge % 4 + 1;
		RD_edge = LD_edge % 4 + 1;
		RU_edge = RD_edge % 4 + 1;

		lstrand = last_gens[cur_gen];
		rstrand = last_gens[cur_gen + 1];

		/* edge from the left strand leading to this crossing */
		if (lstrand[1] != 0,
			pgraph[cur_Xing][2][LU_edge] = lstrand;
			pgraph[lstrand[1]][2][lstrand[2]] = [cur_Xing, LU_edge];
		);

		/* edge from the right strand leading to this crossing */
		if (rstrand[1] != 0,
			pgraph[cur_Xing][2][RU_edge] = rstrand;
			pgraph[rstrand[1]][2][rstrand[2]] = [cur_Xing, RU_edge];
		);

		last_gens[cur_gen] = [cur_Xing, LD_edge];
		last_gens[cur_gen + 1] = [cur_Xing, RD_edge];
	);

	graph2diagr(pgraph);
}

brvec2diagr(braidvec) = braid2diagr(braidvec[1], braidvec[2]);

/*
 * Return the diagram of the (n,m)-torus link or knot (iff gcd(n,m)=1).
 */
torus_diagr(n, m) =
	braid2diagr(n, concat(vector(m, i, vector(n - 1, j, n - j))));

/*
 * The same as torus_diagr, but the diagram is initialized
 */
torus(n, m) =
{
	init_diagr(torus_diagr(n, m),
		Str("(", n, ", ", m, ")-torus ",
			if (gcd(n, m) == 1, "knot", "link")));
}

/*
 * Return the diagram of a pretzel link or knot (iff the number of bands
 * with even number of twists is at most 1)
 */
pretzel_diagr(twist_list) =
{
	local (band_num, vnum, first_Xing, last_Xing, cur_band, only_odd);
	local (strand_dir, cur_right_dir, Xing_twist, Xing_strand_dir);
	local (LU_edge, LD_edge, RD_edge, RU_edge, pgraph);
	local (prev_band, next_band, Xing_sign);

	/* number of two-strand "bands" in the pretzel */
	band_num = length(twist_list);

	/* number of the first and last crossings in each band */
	first_Xing = last_Xing = vector(band_num);

	first_Xing[1] = 1;
	last_Xing[1] = abs(twist_list[1]);
	for (i = 2, band_num,
		first_Xing[i] = first_Xing[i - 1] + abs(twist_list[i - 1]);
		last_Xing[i] = last_Xing[i - 1] + abs(twist_list[i]);
	);

	/* now we know the total number of crossings */
	vnum = last_Xing[band_num];

	/* find the first band with even number of twists, if any */
	cur_band = 1;
	only_odd = 1;
	for (i = 1, band_num,
		if (twist_list[i] % 2 == 0,
			only_odd = 0; cur_band = i; break;
		);
	);

	/* orientation of strands; we assume that the right strand at all
	 * bands with even number of twists is oriented upward; if there are
	 * none, the right strand at the first band is oriented upward */
	if (only_odd,
		strand_dir = vector(band_num, i, [-1, 1]);
		,
		strand_dir = vector(band_num, i, [0, 0]);

		cur_right_dir = strand_dir[cur_band][2] = 1;
		for (i = 1, band_num,
			cur_band = cur_band % band_num + 1;

			strand_dir[cur_band][1] = -cur_right_dir;

			/* the strand that we started with will be oriented
			 * upward again at the last step; no problem */
			cur_right_dir = strand_dir[cur_band][2] =
					if (twist_list[cur_band] % 2 == 0,
							1, -cur_right_dir);
		);
	);

	/* orientations of strands at each crossing and the sign of twists */
	Xing_twist = Xing_strand_dir = vector(vnum);
	for (i = 1, band_num,
		if (twist_list[i] == 0, next);

		Xing_strand_dir[first_Xing[i]] = strand_dir[i];
		Xing_twist[first_Xing[i]] = sign(twist_list[i]);

		for (j = first_Xing[i] + 1, last_Xing[i],
			/* orientations of strands are exchanged
			 * after each crossing */
			Xing_strand_dir[j] =
				Xing_strand_dir[j - 1] * [0, 1; 1, 0];

			/* but signs of twists remain the same */
			Xing_twist[j] = Xing_twist[j - 1];
		);
	);

	/* numbers of 4 half-edges at each crossings.
	 * these may be different on the same band, since the strand
	 * orientations change from crossing to crossing.
	 * upper left half-edge has the following number:
	 *        | UU  UD  DU  DD
	 *   ----------------------
	 *    pos |  3   3   1   1
	 *    neg |  4   2   4   2
	 */
	LU_edge = vector(vnum, i, if (Xing_twist[i] > 0,
			2 + Xing_strand_dir[i][1], 3 + Xing_strand_dir[i][2]));
	LD_edge = vector(vnum, i, LU_edge[i] % 4 + 1);
	RD_edge = vector(vnum, i, LD_edge[i] % 4 + 1);
	RU_edge = vector(vnum, i, RD_edge[i] % 4 + 1);

	/* time to start building the graph */
	pgraph = vector(vnum);

	for (i = 1, band_num,
		if (twist_list[i] == 0, next);

		next_band = i % band_num + 1;
		prev_band = (i - 2) % band_num + 1;

		/* sign of crossings is the same for the whole band */
		Xing_sign = sign(twist_list[i]) *
				strand_dir[i][1] * strand_dir[i][2];

		/* connections at the top of the band */
		pgraph[first_Xing[i]] = [Xing_sign, vector(4)];
		pgraph[first_Xing[i]][2][LU_edge[first_Xing[i]]] =
			if (twist_list[prev_band] == 0,
				[last_Xing[i], LD_edge[last_Xing[i]]];
				,
				[first_Xing[prev_band],
						RU_edge[first_Xing[prev_band]]];
			);
		pgraph[first_Xing[i]][2][RU_edge[first_Xing[i]]] = 
			if (twist_list[next_band] == 0,
				[last_Xing[i], RD_edge[last_Xing[i]]];
				,
				[first_Xing[next_band],
						LU_edge[first_Xing[next_band]]];
			);

		for (j = first_Xing[i] + 1, last_Xing[i],
			pgraph[j] = [Xing_sign, vector(4)];

			pgraph[j - 1][2][LD_edge[j - 1]] = [j, LU_edge[j]];
			pgraph[j - 1][2][RD_edge[j - 1]] = [j, RU_edge[j]];

			pgraph[j][2][LU_edge[j]] = [j - 1, LD_edge[j - 1]];
			pgraph[j][2][RU_edge[j]] = [j - 1, RD_edge[j - 1]];
		);


		/* connections at the bottom of the band */
		pgraph[last_Xing[i]][2][LD_edge[last_Xing[i]]] =
			if (twist_list[prev_band] == 0,
				[first_Xing[i], LU_edge[first_Xing[i]]];
				,
				[last_Xing[prev_band],
						RD_edge[last_Xing[prev_band]]];
			);
		pgraph[last_Xing[i]][2][RD_edge[last_Xing[i]]] = 
			if (twist_list[next_band] == 0,
				[first_Xing[i], RU_edge[first_Xing[i]]];
				,
				[last_Xing[next_band],
						LD_edge[last_Xing[next_band]]];
			);
	);
		
	graph2diagr(pgraph);
}

/*
 * Auxiliary function: convert a vector into a string with brackets removed
 */
vec2str(vec) = concat(vecextract(Vec(Str(vec)), "2..-2"));

/*
 * Auxiliary function: check whether the pretzel is a knot or link
 */
is_pretzel_knot(twist_list) =
{
	local (num_even);

	num_even = 0;
	for (i = 1, length(twist_list),
		if (twist_list[i] % 2 == 0, num_even++);
	);

	num_even <= 1;
}

/*
 * The same as pretzel_diagr, but the diagram is initialized
 */
pretzel(twist_list) =
{
	init_diagr(pretzel_diagr(twist_list),
		Str("(", vec2str(twist_list), ")-pretzel ",
			if (is_pretzel_knot(twist_list), "knot", "link")));
}

/* ************************************************************************ */

writePD(fname, diagr, comment) =
{
	local(Xnum);

	Xnum = matsize(diagr)[1];
	write1(fname, comment, " PD[");
	for (i = 1, Xnum,
		write1(fname, "X", diagr[i, ]);
		if (i < Xnum,
			write1(fname, ", ");
			,
			write(fname, "]");
		);
	);
}
